import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import './SalesReport.css'; // Import the CSS file for styling

export default function SalesReport() {
  const [salesData, setSalesData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [reportType, setReportType] = useState('monthly');
  const [year, setYear] = useState(new Date().getFullYear());
  const [month, setMonth] = useState(new Date().getMonth() + 1);
  const [generatedBy, setGeneratedBy] = useState('admin'); // Added state for "Generated By"

  const fetchSalesReport = useCallback(async () => {
    setLoading(true);
    setError('');
    try {
      const response = await axios.get('http://localhost:8080/api/reports/sales', {
        params: { 
          type: reportType, 
          year, 
          month, 
          generatedBy: generatedBy // Passing generatedBy in API request
        },
        responseType: 'blob',
      });

      if (response.status === 200) {
        setSalesData(response.data);
      } else {
        setError('Failed to fetch report data.');
      }
    } catch (error) {
      console.error('Error fetching report:', error);
      setError('Failed to fetch report data.');
    } finally {
      setLoading(false);
    }
  }, [reportType, year, month, generatedBy]); // Add generatedBy as a dependency

  const downloadReport = () => {
    if (!salesData) return;
    const fileURL = URL.createObjectURL(salesData);
    const link = document.createElement('a');
    link.href = fileURL;
    link.download = `sales_report_${year}_${month}.pdf`;
    link.click();
  };

  useEffect(() => {
    fetchSalesReport();
  }, [fetchSalesReport]);

  return (
    <div className="sales-report-page">
      <div className="container mt-5 pt-5">
        <div className="title-section">
          <h1 className="text-center mb-1">Sales Analytics Dashboard</h1>
          <div className="title-underline"></div>
          <p className="text-center text-muted subtitle">Comprehensive Sales Performance Analysis</p>
        </div>

        <div className="report-card">
          <form onSubmit={(e) => {
            e.preventDefault();
            fetchSalesReport();
          }}>
            <div className="report-header">
              <div className="report-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                  <polyline points="7 10 12 15 17 10"></polyline>
                  <line x1="12" y1="15" x2="12" y2="3"></line>
                </svg>
              </div>
              <div className="header-content">
                <h2 className="report-title">Report Configuration</h2>
                <p className="report-subtitle">Select parameters to generate detailed sales report</p>
              </div>
            </div>
            
            <div className="report-filters mb-4">
              <div className="row g-4">
                <div className="col-md-4">
                  <div className="input-group-custom">
                    <label htmlFor="reportType" className="form-label">Report Frequency</label>
                    <div className="select-wrapper">
                      <select
                        id="reportType"
                        className="form-select custom-select"
                        value={reportType}
                        onChange={(e) => setReportType(e.target.value)}
                      >
                        <option value="monthly">Monthly Summary</option>
                        <option value="yearly">Annual Overview</option>
                      </select>
                      <div className="select-arrow"></div>
                    </div>
                  </div>
                </div>

                <div className="col-md-4">
                  <div className="input-group-custom">
                    <label htmlFor="year" className="form-label">Year</label>
                    <div className="input-wrapper">
                      <input
                        type="number"
                        id="year"
                        className="form-control custom-input"
                        value={year}
                        onChange={(e) => setYear(e.target.value)}
                        min="2000"
                        max={new Date().getFullYear()}
                      />
                      <span className="input-icon">ðŸ“…</span>
                    </div>
                  </div>
                </div>

                {reportType === 'monthly' && (
                  <div className="col-md-4">
                    <div className="input-group-custom">
                      <label htmlFor="month" className="form-label">Reporting Month</label>
                      <div className="input-wrapper">
                        <input
                          type="number"
                          id="month"
                          className="form-control custom-input"
                          value={month}
                          onChange={(e) => setMonth(e.target.value)}
                          min="1"
                          max="12"
                        />
                        <span className="input-icon">ðŸ—“</span>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* New 'Generated By' selection */}
              <div className="col-md-4">
                <div className="input-group-custom">
                  <label htmlFor="generatedBy" className="form-label">Generated By</label>
                  <div className="select-wrapper">
                    <select
                      id="generatedBy"
                      className="form-select custom-select"
                      value={generatedBy}
                      onChange={(e) => setGeneratedBy(e.target.value)}
                    >
                      <option value="admin">Admin</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>

            <div className="action-section">
              <button
                type="submit"
                className="btn btn-primary normal-button"
                disabled={loading}
              >
                {loading ? (
                  <div className="loading-indicator">
                    <div className="spinner"></div>
                    <span>Compiling Report...</span>
                  </div>
                ) : (
                  <>
                    <svg className="button-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                      <g fill="none" stroke="currentColor" strokeWidth="2">
                        <path d="M19 16v3m0 0v3m0-3h3m-3 0h-3"/>
                        <path strokeLinecap="round" d="M21 12a9 9 0 10-12 8.196"/>
                      </g>
                    </svg>
                    Generate Report
                  </>
                )}
              </button>
              
              {salesData && (
                <button
                  type="button"
                  className="btn btn-success normal-button ml-3"
                  onClick={downloadReport}
                >
                  <svg className="button-icon" viewBox="0 0 24 24">
                    <path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/>
                  </svg>
                  Download PDF
                </button>
              )}
            </div>
          </form>

          {error && (
            <div className="alert alert-danger mt-3">
              <strong>Error:</strong> {error}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
